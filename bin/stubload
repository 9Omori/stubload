#!/usr/bin/env bash

# set -e -- tell shell to exit on errors
set -e

VERSION="0.1.4-2"
VERSION_CODE=14
TIME="18:10"
DATE="18/03/2024"
TZONE="gmt"

EVERSION=$(efibootmgr -V) EVERSION="${EVERSION/* }"

die()
{
  # \e[1;31m -- change output to red
  # \e[0m -- change output to default
  # >&2 -- redirect stdout to stderr
  echo $'\e[1;31m'"error:" $'\e[0m'"$1" >&2 && shift
 
  while (($#)); do
    echo "$1" >&2 && shift
  done

  (($force)) && return 1
  exit 1
}

execq()
{
  eval command -v "$1" >$void
}

sub()
{
  if ((${#NUMARGV[@]})); then
    for x in ${NUMARGV[@]}; do
      eval "_$1"
    done
  else
    x=1
    until ! (execq entry_$x); do
      eval "_$1"
      let x++
    done
  fi
}

usage()
{
  # ${0/*\/} -- remove everything before '/' to
  # get just executable name
  echo \
"stubload version $VERSION
Usage: ${0/*\/} [OPTION]...

 -h, --help          print help & exit
 -v, --verbose       don't suppress output
 -V, --version       print version
 -C, --edit_config   edit configuration file
 -A, --add_cmdline   add option to kernel cmdline
 -R, --rm_cmdline    remove option from kernel cmdline
 -l, --list          list entries
 -c, --create        create entries
 -r, --remove        remove entries
 -[n]                specify entry's number to target

 --force             ignore errors
 --config [file]     specify configuration file
"
}

scripts()
{
  # add a '.' to the front of a script's name to disable it
  for script in /lib/stubload/scripts/*.sh; do
    source "$script" >>$log
  done
}

preset()
{
  PRESET="$1"; shift
  source /lib/stubload/presets/"$PRESET" >>$log
}

config()
{
  if (($configArg)) && ((${#STRARGV[@]})); then
    config="${STRARGV[0]}"
    STRARGV="${STRARGV[@]/$config}"
  elif (($configArg)); then
    die "configuration file expected"
  fi

  configDir=$(dirname $config)
  configBase=$(basename $config)

  [ -d "$configDir" ] || mkdir -v $configDir

  target()
  {
    if [[ "$1" == "-p" || "$1" == "--preset" ]]; then
      preset "$2"
    else
      target="$1"
    fi
  }

  ramdisk()
  {
    if [[ "$1" == "-p" || "$1" == "--preset" ]]; then
      preset "$2"
    else
      ramdisk="$1"
    fi
  }

  dir() { bootDir="$1" ;}
  label() { label="$1" ;}
  cmdline() { unicode="$1" ;}

  CONFIN=$(<$config)

  source "$config" || die "$config: failed to access configuration file"
}

edit_config()
{
  config

  ((${#EDITOR})) || EDITOR=vi
  TMP="$configDir/$configBase-$(date +%s).tmp"

  cp "$config" "$TMP"
  $EDITOR "$TMP"

  if (cmp -s $config $TMP); then
    rm -f "$TMP"
    echo "$config: no changes made"
  else
    mv "$TMP" "$config"
    echo "$config: saved changes"
  fi
}

add_cmdline()
{
  config

  _add_cmdline()
  {
    if ! ((${#x})); then
      die "no entry to modify specified"
    fi
    entry_$x

    origUnicode="$unicode"
    unicode="$unicode ${STRARGV[@]}"

    echo "${CONFIN/$origUnicode/$unicode}" >$config

    if ! (($?)); then
      echo "${STRARGV[@]}: added to cmdline"
      exit
    else
      die "${STRARGV[@]}: failed to add to cmdline"
    fi
  }

  sub "${FUNCNAME[0]}"
}

rm_cmdline()
{
  config

  _rm_cmdline()
  {
    if ! ((${#x})); then
      die "no entry to modify specified"
    fi
    entry_$x

    origUnicode="$unicode"
    unicode="${unicode/${STRARGV[@]}}" unicode=$(xargs <<<"$unicode")

    echo "${CONFIN/$origUnicode/$unicode}" >$config

    if ! (($?)); then
      echo "${STRARGV[@]}: removed from cmdline"
      exit
    else
      die "${STRARGV[@]}: failed to remove from cmdline"
    fi
  }

  sub "${FUNCNAME[0]}"
}

entry_exists()
{
  [[ "$(efibootmgr)" =~ "$label" ]]
}

create_entry()
{
  config; scripts
  cd $configDir

  _create_entry()
  {
    entry_$x

    if (entry_exists) && ! (($force)); then
      die \
        "$label: entry already exists"\
        "use '--force' to ignore"
    fi

    # "${part/ */}" -- get only first string
    part=$(grep " $bootDir " </proc/mounts); part="${part// *}"
    local part="$part"

    case "$part" in
      "/dev/nvme"*|"/dev/mmcblk"*)
        # '//p*' -- remove 'p' & everything after 'p'
        # '//*p' -- remove 'p' & everything before 'p'
        local disk="${part//p*}"
        local partInt="${part//*p}"
        ;;
      "/dev/sd"*)
        # '//![0-9]' -- remove all non-numbers
        local disk="${part//sd*}"
        local partInt="${part//[!0-9]}"
        ;;
      *)
        die "$part: unrecognised disk mapping"
        ;;
    esac

    echo "create: $label "
    efibootmgr -c -d "$disk" -p "$partInt" -L "$label" -l "$target" -u "initrd=\\$ramdisk $unicode" | grep "$label" >>$log

    if (($?)); then
      die "$label: failed to add entry"
    fi
  }

  sub "${FUNCNAME[0]}"
}

remove_entry()
{
  config

  _remove_entry()
  {
    entry_$x

    echo "remove: $label "
    until ! (entry_exists); do
      # head -n1 -c8 -- get first line & first 8 characters
      int=$(efibootmgr | grep "$label" | head -n1 -c8) int="${int//Boot}"

      ((${#int})) && efibootmgr -B -b "$int" | grep "$label" >>$log
    done

    if (entry_exists); then
      die "$label: failed to remove entry"
    fi
  }

  sub "${FUNCNAME[0]}"
}

list_entry()
{
  config

  _list_entry()
  {
    entry_$x

    int=$(efibootmgr | grep "$label" | head -n1 -c8) int="${int/Boot}"
    (entry_exists) && echo "$int|$x $label"
  }

  sub "${FUNCNAME[0]}"
}

version()
{
  echo "stubload version $VERSION"
  echo "efibootmgr version $EVERSION"
  exit 0
}

parse_arg()
{
  _arg()
  {
    case "$1" in
      "version"|"usage"|"list_entry"|"remove_entry"|"edit_config") i=1 ;;
      "create_entry") i=2 ;;
      "add_cmdline"|"rm_cmdline"|"config") i=0 ;;
    esac

    ((${#ARGX[$i]})) && die "conflicting arguments provided"
    ARGX[$i]="$1"
  }

  for ARG in $@; do
    case "$ARG" in
      "--"*)
        :
        ;;
      "-"[0-9]*)
        set -- ${@/$ARG}
        NUMARGV+=( ${ARG/-} )
        ;;
      "-"*)
        for SHORTARG in $(fold -w1 <<<"${ARG/-}" | xargs); do
          set -- "-$SHORTARG" ${@/-$SHORTARG}
        done
        ;;
    esac
  done

  while (($#)); do
    case "$1" in
      "--force") force=1 ;;
      "--config") configArg=1; _arg "config" ;;
      "--verbose"|"-v") verbose=1 ;;
      "--version"|"-V") _arg "version" ;;
      "--help"|"-h") _arg "usage" ;;
      "--edit_config"|"-C") _arg "edit_config" ;;
      "--add_cmdline"|"-A") _arg "add_cmdline" ;;
      "--rm_cmdline"|"-R") _arg "rm_cmdline" ;;
      "--list"|"-l") _arg "list_entry" ;;
      "--remove"|"-r") _arg "remove_entry" ;;
      "--create"|"-c") _arg "create_entry" ;;
      "--"*|"-"*) die "$1: unrecognised argument" ;;
      *) STRARGV+=( "$1" ) ;;
    esac
    shift
  done

  ((${#ARGX[@]})) || _arg "usage"

  unset _arg
}

((${#config})) || config="/etc/efistub/stubload.conf"
void=/dev/null

parse_arg $@

log="/dev/null"
(($verbose)) && log="/dev/stdout"

for func in ${ARGX[@]}; do
  eval "$func"
done
