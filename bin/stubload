#!/usr/bin/env bash

# errexit -- exit on errors
set -o errexit

VERSION="0.1.4-3"
VERSION_CODE=15
TIME="17:13"
DATE="23/03/2024"
TZONE="gmt"

EVERSION=$(efibootmgr -V) EVERSION="${EVERSION/* }"

function die
{
  # \e[1;31m -- change output to red
  # \e[0m -- change output to default
  local red=$'\e[1;31m'
  local none=$'\e[0m'

  # >&2 -- redirect stdout to stderr
  echo $red"error:"$none "$1" >&2; shift

  while (($#)); do
    echo "$1" >&2; shift
  done

  if ! (($force)); then
    return 1
  fi
}

function execq
{
  command -v "$1" >$void
  return $?
}

function sub
{
  if ((${#NUMARGV[@]})); then
    for i in ${NUMARGV[@]}; do
      _$1
    done
  else
    # declare -i -- set integer variable
    declare -i i=1
    while (execq entry_$i); do
      _$1
      i+=1
    done
  fi
}

function usage
{
  # ${0/*\/} -- remove everything before '/' to
  # get just executable name
  echo \
"stubload version $VERSION
Usage: ${0/*\/} [OPTION]...

 -h, --help          print help & exit
 -v, --verbose       don't suppress output
 -V, --version       print version
 -C, --edit_config   edit configuration file
 -G, --cmdline       get current cmdline
 -A, --add_cmdline   add option to kernel cmdline
 -R, --rm_cmdline    remove option from kernel cmdline
 -l, --list          list entries
 -c, --create        create entries
 -r, --remove        remove entries
 -[n]                specify entry's number to target

 --force             ignore errors
 --config [file]     specify configuration file
"
}

function scripts
{
  # add a '.' to the front of a script's name to disable it
  for script in $(ls -1 -d /lib/stubload/scripts/*.sh 2>/dev/null); do
    source "$script" >>$log
  done
}

function preset
{
  source /lib/stubload/presets/"$1" >>$log
}

function config
{
  if (($configArg)) && ((${#STRARGV[@]})); then
    config="${STRARGV[0]}"
    STRARGV="${STRARGV[@]/$config}"
  elif (($configArg)); then
    die "configuration file expected"
  fi

  configDir=$(dirname $config)
  configBase=$(basename $config)

  [ -d "$configDir" ] || mkdir -v $configDir

  target()
  {
    if [[ "$1" == "-p" || "$1" == "--preset" ]]; then
      preset "$2"
    else
      target="$1"
    fi
  }

  ramdisk()
  {
    if [[ "$1" == "-p" || "$1" == "--preset" ]]; then
      preset "$2"
    else
      ramdisk="$1"
    fi
  }

  dir() { bootDir="$1" ;}
  label() { label="$1" ;}
  cmdline() { unicode="$1" ;}

  CONFIN=$(<$config)

  source "$config" || die "$config: failed to access configuration file"
}

function edit_config
{
  config

  ((${#EDITOR})) || EDITOR=vi
  TMP="$configDir/$configBase-$(date +%s).tmp"

  cp "$config" "$TMP"
  $EDITOR "$TMP"

  if (cmp -s $config $TMP); then
    rm -f "$TMP"
    echo "$config: no changes made"
  else
    mv "$TMP" "$config"
    echo "$config: saved changes"
  fi
}

function cmdline
{
  config

  function _cmdline
  {
    if ! ((${#i})); then
      die "must specify an entry"
    fi
    entry_$i

    echo "$i| $unicode"
  }

  sub "${FUNCNAME[0]}"
}

function add_cmdline
{
  config

  function _add_cmdline
  {
    if ! ((${#i})); then
      die "no entry to modify specified"
    fi
    entry_$i

    origUnicode="$unicode"
    unicode="$unicode ${STRARGV[@]}"

    echo "${CONFIN/$origUnicode/$unicode}" >$config
    echo "${STRARGV[@]}: added to cmdline"
  }

  sub "${FUNCNAME[0]}"
}

function rm_cmdline
{
  config

  function _rm_cmdline
  {
    if ! ((${#i})); then
      die "no entry to modify specified"
    fi
    entry_$i

    origUnicode="$unicode"
    unicode="${unicode/${STRARGV[@]}}" unicode=$(xargs <<<"$unicode")

    echo "${CONFIN/$origUnicode/$unicode}" >$config
    echo "${STRARGV[@]}: removed from cmdline"
  }

  sub "${FUNCNAME[0]}"
}

function match_entry
{
  EFIDUMP=$(efibootmgr | xargs)
  BOOTINTS=$(grep -E -o "Boot[0-9]{4}\*" <<<"$EFIDUMP")

  for bootint in ${BOOTINTS[@]}; do
    if (grep -q -F -o "$bootint $label HD(" <<<"$EFIDUMP"); then
      int="${bootint//[!0-9]}"
      break
    fi
  done
}

function entry_exists
{
  unset int EFIDUMP BOOTNUMS
  match_entry
  ((${#int} == 4))
}

function create_entry
{
  config; scripts
  cd $configDir

  function _create_entry
  {
    entry_$i

    if (entry_exists) && ! (($force)); then
      die \
        "$label: entry already exists"\
        "use '--force' to ignore"
    fi

    # "${part/ */}" -- get only first string
    part=$(grep " $bootDir " </proc/mounts); part="${part// *}"
    local part="$part"

    case "${part#/dev/}" in
      "nvme"*|"mmcblk"*)
        # '//p*' -- remove 'p' & everything after 'p'
        # '//*p' -- remove 'p' & everything before 'p'
        local disk="${part//p*}"
        local partInt="${part//*p}"
        ;;
      "sd"*)
        # '//[!0-9]' -- remove all non-numbers
        local disk="${part//sd*}"
        local partInt="${part//[!0-9]}"
        ;;
      *)
        die "$part: unrecognised disk mapping"
        ;;
    esac

    echo "create: $label "
    efibootmgr -c -d "$disk" -p "$partInt" -L "$label" -l "$target" -u "initrd=\\$ramdisk $unicode" | grep "$label" >>$log
  }

  sub "${FUNCNAME[0]}"
}

function remove_entry
{
  config

  function _remove_entry
  {
    entry_$i

    echo "remove: $label "
    while (entry_exists); do
      match_entry

      if ((${#int} == 4)); then
        efibootmgr -B -b "$int" >>$log
      fi
    done

    if (entry_exists); then
      die "$label: failed to remove entry"
    fi
  }

  sub "${FUNCNAME[0]}"
}

function list_entry
{
  config

  function _list_entry
  {
    entry_$i

    int=$(efibootmgr | grep "$label" | head -n1 -c8) int="${int/Boot}"
    (entry_exists) && echo "$int|$i $label"
  }

  sub "${FUNCNAME[0]}"
}

function version
{
  echo "stubload version $VERSION"
  echo "efibootmgr version $EVERSION"
}

function parse_arg
{
  function _arg
  {
    declare -i i
    case "$1" in
      "version"|"usage"|"list_entry"|"remove_entry"|"edit_config"|"cmdline") i=1 ;;
      "create_entry") i=2 ;;
      "add_cmdline"|"rm_cmdline"|"config") i=0 ;;
    esac

    ((${#ARGX[$i]})) && die "conflicting arguments provided"
    ARGX[$i]="$1"
  }

  for ARG in $@; do
    case "$ARG" in
      "--"*)
        :
        ;;
      "-"[0-9]*)
        set -- ${@/$ARG}
        NUMARGV+=( ${ARG/-} )
        ;;
      "-"*)
        for SHORTARG in $(fold -w1 <<<"${ARG/-}" | xargs); do
          set -- "-$SHORTARG" ${@/-$SHORTARG}
        done
        ;;
    esac
  done

  while (($#)); do
    case "$1" in
      "--force") force=1 ;;
      "--config") configArg=1; _arg "config" ;;
      "--verbose"|"-v") verbose=1 ;;
      "--version"|"-V") _arg "version" ;;
      "--help"|"-h"|"-?") _arg "usage" ;;
      "--edit_config"|"-C") _arg "edit_config" ;;
      "--cmdline"|"-G") _arg "cmdline" ;;
      "--add_cmdline"|"-A") _arg "add_cmdline" ;;
      "--rm_cmdline"|"-R") _arg "rm_cmdline" ;;
      "--list"|"-l") _arg "list_entry" ;;
      "--remove"|"-r") _arg "remove_entry" ;;
      "--create"|"-c") _arg "create_entry" ;;
      "--"*|"-"*) die "unrecognised option -- ${1//-}" ;;
      *) STRARGV+=( "$1" ) ;;
    esac
    shift
  done

  ((${#ARGX[@]})) || _arg "usage"

  unset _arg
}

((${#config})) || config="/etc/efistub/stubload.conf"
void=/dev/null

parse_arg $@

log="/dev/null"
(($verbose)) && log="/dev/stdout"

for func in ${ARGX[@]}; do
  "$func"
done
